<?php

/**
 * @file
 * MDA34 Utilities.
 */

/**
 * Implements hook_enable().
 *
 * Create a field and attach it to node bundle 'identite'.
 */
function mda_utils_enable() {
	// Create base field field_homonym.	
	$field = array(
		'field_name' => "field_homonym",
		'type' => 'list_boolean',
		'cardinality' => 1,
		'settings' => array(
			'allowed_values' => array(
			  // The docs say that this is optional, but without it, the value is never saved to the datbase
				0 => '',
				1 => '',
			),
		),
	);
	field_create_field($field);
	
	// Create instance field 'Création d'un homonyme' and attach to content type 'identite'.
	$instance = array(
		'field_name' => $field['field_name'],
		'entity_type' => 'node',
		'bundle' => 'identite',
	  'label' => 'Création d\'un homonyme',
	  'required' => false,
	  'widget' => array(
	    'type' => 'options_onoff',
	    'settings' => array(
	      'display_label' => 1,
	    	'weight' => 0,
			),
		),
	);
	field_create_instance($instance);
}

/**
 * Implements hook_disable().
 *
 * Remove field instance from node bundle (content type) and then delete the field.
 */
function mda_utils_disable() {
	$instance = array(
			'field_name' => 'field_homonym',
			'entity_type' => 'node',
			'bundle' => 'identite',
	);
	field_delete_instance($instance);
	field_delete_field($instance['field_name']);
}

/**
 * Implements hook_menu().
 */
function mda_utils_menu() {
	$items = array();

	$items['admin/config/mda'] = array(
			'title' => t('MDA'),
			'description' => 'MDA settings',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('mda_settings_form'),
			'access arguments' => array('administer MDA'),
			'file' => 'mda_utils.admin.inc',
			'type' => MENU_NORMAL_ITEM,
	);

	return $items;
}

/**
 * Implements hook_permission().
 */
function mda_utils_permission() {
	return array(
		'administer MDA' => array(
			'title' => t('Administer MDA Utils'),
		),
	);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mda_utils_form_identite_node_form_alter(&$form, &$form_state, $form_id) {
	// If node is being created, not edited, we add a custom validation function
	if (!isset($form_state['node']->nid)) {
		$form['#validate'][] = 'mda_duplicate_identite_form_validate';
	}
}

/**
 * Custom form validation handler for duplicate identities.
 */
function mda_duplicate_identite_form_validate($form, &$form_state) {
	// Run validation only if field_homonym checkbox field is not checked.
	// A checked field means that user wants to save an homonym.
	if (!isset($form_state['input']['field_homonym']['und'])) {
		// Submitted Nom and Prenom values.
		$firstname = $form_state['input']['field_a_prenom']['und'][0]['value'];
		$lastname = $form_state['input']['field_a_nom']['und'][0]['value'];
		
		// Fetch homonyms in database.
		$query = new EntityFieldQuery;
		$query->entityCondition('entity_type', 'node')
		->entityCondition('bundle', 'identite')
		->propertyCondition('status', 1)
		->fieldCondition('field_a_nom', 'value', $lastname)
		->fieldCondition('field_a_prenom', 'value', $firstname);
		$results = $query->execute();
		
		if (isset($results['node'])) {
			// Load nodes to get Contacts data.
			$nodes = node_load_multiple(array_keys($results['node']));
			
			// Prepare text to by displayed in Drupal messages region.
			$text = 'une fiche de contact';
			$nb = sizeof($nodes);
			if ($nb > 1) {
				$text = 'plusieurs fiches de contact';
			}
			$text = 'ATTENTION ! Il existe déjà ' . $text . ' avec les mêmes nom et prénom.';
				
			// Get possible values displayed by field field_a_qui.
			$field_who = field_info_field('field_a_qui');
			$who_values= list_allowed_values($field_who);
			
			// Build list of Contacts.
			$text .= '<dl class="duplicate-identities-contacts">';
			$count = 1;
			foreach ($nodes as $node) {
				$form_nb = '';
				if ($nb > 1 ) {
					$form_nb = $count;
				}
				$text .= '<dt>Contacts fiche ' . $form_nb . ' </dt>';
				$node_wrapper = entity_metadata_wrapper('node', $node);
				
				foreach ($node_wrapper->field_a_contact as $field_collection_wrapper) {
					$field_collection = $field_collection_wrapper->value();
	
					$who_name = '';
					$who_value = $field_collection->field_a_qui['und'][0]['value'];
					$who = $who_values[$who_value];
					if ($who_value != 3) {
						$who_name = '(' . $field_collection->field_a_nom_contact['und'][0]['value'] . ')';
					}
					$contact = $who . ' ' . $who_name;
					
					$text .= '<dd>' . $who . ' ' . $who_name . '</dd>';
				}
				$count++;
			}
			$text .= '</dl>';
	
			// Label of field_homonym's field instance in "identite" bundle.
			$field_homonym = field_info_instance('node', 'field_homonym', 'identite');
			$field_homonym_label = $field_homonym['label'];
	
			$text .= 'Si vous souhaitez quand-même enregistrer cette fiche,';
			$text .= ' cochez la case <b><i>' . $field_homonym_label . '</i></b>';
			$text .= ' située en bas du formulaire puis cliquez sur <b>ENREGISTRER</b>.';
			
			form_set_error('homonym', $text);
		}
	}
}

/**
 * Implements hook_node_postinsert().
 * See module Hook Post Action (https://www.drupal.org/project/hook_post_action).
 */
function mda_utils_node_postinsert($node) {
	if ($node->type == 'identite') {
		// Logging for node identite creation.
		$firstname = $node->field_a_prenom['und'][0]['value'];
		$lastname = $node->field_a_nom['und'][0]['value'];
		$message = t('Node identite for %firstname %lastname created.', array('%firstname' => $firstname, '%lastname' => $lastname));
		watchdog('mda', $message);
		
		// Ccreation of corresponding creation node.
		$orientation_node = new stdClass();
		$orientation_node->type = 'orientation';
		$orientation_node->language = LANGUAGE_NONE;
		node_object_prepare($orientation_node);
		
		$orientation_node->title = "Orientation de " . $firstname . ' ' . $lastname;
		$orientation_node->status = 1;
		$orientation_node->promote = 0;
		$orientation_node->sticky = 0;
		$orientation_node->comment = 1;
		$orientation_node->uid = 1;
		$orientation_node->field_b_nom[LANGUAGE_NONE][0]['nid'] = $node->nid;
		
		node_save($orientation_node);
		
		$message = t('Node orientation for %firstname %lastname created', array('%firstname' => $firstname, '%lastname' => $lastname));
		watchdog('mda', $message);
		
		// Email message building.
		$user = user_load($node->field_a_transmission['und'][0]['uid']);
		$to = $user->mail;
		$from = variable_get('mda_orientation_email_from');
		
		$email_subject = variable_get('mda_orientation_email_subject', '[Tdbmda] : Nouvelle orientation à traiter');
		$email_subject = str_replace('%contact', $node->title, $email_subject);
		
		$email_body = variable_get('mda_orientation_email_body', 'http://192.168.1.7/tdbmda/demande2015');
		$email_body = str_replace('%lastname', strtolower($lastname), $email_body);
		$email_body = str_replace('%firstname', strtolower($firstname), $email_body);
		
		$params = array(
			'subject' => $email_subject,
			'body' => $email_body,
		);
		
		if (drupal_mail('mda_utils', 'orientation_email', $to, language_default(), $params, $from)) {
			$message = t('Orientation email message sent successfully to %to', array('%to' => $to));
			$type = 'status';
		}
		else {
			$message = t('Orientation email message could not be sent to %to', array('%to' => $to));
			'warning';
		}
		watchdog('mda', $message);
		drupal_set_message($message, $type);
	}
}

/**
 * Implements hook_mail().
 */
function mda_utils_mail($key, &$message, $params) {
	switch ($key) {
		case 'orientation_email':
			$message['subject'] = $params['subject'];
			$message['body'][] = $params['body'];
			break;
	}
}
